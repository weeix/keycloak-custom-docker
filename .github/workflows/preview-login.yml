name: Preview themed login

on:
  pull_request:

jobs:
  preview:
    name: Build & capture login preview
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Playwright dependencies
        working-directory: tests/playwright
        run: npm install

      - name: Install Playwright browser
        working-directory: tests/playwright
        run: npx playwright install --with-deps chromium

      - name: Start Keycloak
        run: docker compose up -d keycloak

      - name: Wait for Keycloak to be ready
        run: |
          for attempt in {1..30}; do
            if curl -fsS http://localhost:8080/realms/master/.well-known/openid-configuration > /dev/null; then
              exit 0
            fi
            echo "Keycloak is not ready yet (attempt ${attempt}). Waiting..."
            sleep 5
          done
          echo "Keycloak did not become ready in time" >&2
          docker compose logs keycloak
          exit 1

      - name: Run Playwright tests
        working-directory: tests/playwright
        run: npm test

      - name: Gather login screenshot
        if: always()
        run: |
          mkdir -p tests/playwright/artifacts
          SCREENSHOT=$(find tests/playwright/test-results -name green-sky-login.png -print -quit)
          if [ -n "$SCREENSHOT" ] && [ -f "$SCREENSHOT" ]; then
            cp "$SCREENSHOT" tests/playwright/artifacts/green-sky-login.png
          else
            echo "Login screenshot not found" >&2
          fi

      - name: Publish login screenshot summary
        if: always()
        run: |
          if [ -f tests/playwright/artifacts/green-sky-login.png ]; then
            echo '## Login preview' >> "$GITHUB_STEP_SUMMARY"
            echo >> "$GITHUB_STEP_SUMMARY"
            echo 'Screenshot posted as a PR comment attachment.' >> "$GITHUB_STEP_SUMMARY"
          else
            echo 'Login screenshot was not generated.' >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Post login screenshot comment
        if: ${{ always() && github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            const screenshotPath = 'tests/playwright/artifacts/green-sky-login.png';
            if (!fs.existsSync(screenshotPath)) {
              core.warning('Login screenshot not found; skipping PR comment update.');
              return;
            }

            const marker = '<!-- green-sky-login-preview -->';
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;

            const comments = await github.paginate(github.rest.issues.listComments, {
              owner,
              repo,
              issue_number,
              per_page: 100,
            });

            let targetComment = comments.find(
              (comment) => comment.user?.type === 'Bot' && comment.body?.includes(marker)
            );

            if (!targetComment) {
              const { data } = await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body: `${marker}\nPreparing login screenshotâ€¦`,
              });
              targetComment = data;
            }

            const file = await fs.promises.readFile(screenshotPath);
            const upload = await github.request(
              'POST /repos/{owner}/{repo}/issues/{issue_number}/comments/{comment_id}/attachments',
              {
                owner,
                repo,
                issue_number,
                comment_id: targetComment.id,
                name: 'green-sky-login.png',
                file: file.toString('base64'),
              }
            );

            const assetUrl = upload.data.attachment.url;

            await github.rest.issues.updateComment({
              owner,
              repo,
              comment_id: targetComment.id,
              body: `${marker}\n![Green Sky login](${assetUrl})`,
            });

      - name: Teardown environment
        if: always()
        run: docker compose down -v
